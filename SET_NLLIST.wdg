#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : SET_NLLIST
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x139b23ab19d3d00b
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     code : |1+
      CONSTANT
      	LIST_ALL = 0
      	CRITERION_ATTRIBUTE = 1
      	CRITERION_VALUE = 2
      	
      	RPT_DRAFT = 1
      	RPT_PROGRAM = 2
      	RPT_SENDINGINPROGRESS = 3
      	STATUS_SENDINGOVER = 4
      END
      
      STFilterLine is Structure
      	sDescriptionText is string
      	sCriteria1 is string
      	nOperator is int
      	nCriterionType2 is int // CRITERION_ATTRIBUTE/CRITERION_VALUE
      	sCriteria2 is string
      END
      
      STAutoList is Structure
      	nBaseListID is 8-byte int
      	arrFilter is array of STFilterLine
      END
      
      STListDescription is Structure
      	NLListID is 8-byte int
      	name is string
      	Description is string
      	IsVisible is boolean
      	AutoRecalc is boolean
      	ByDefault is boolean
      	arrUser is array of 8-byte int
      	stAutoRecalc is STAutoList
      END
      
      STHideList is Structure
      	bValidCache is boolean
      	bDynamic is boolean
      	dtRecalculate is datetime
      	arrUser is array of STUserInfo
      END
      
      // Declares and initializes the cache of lists
      gaaList is ASSOCIATIVE ARRAY of STHideList
      _InitCache()
     type : 720896
  procedures :
   -
     name : NL_List_Create
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125890539531
     type_code : 15
     code : |1+
      // Summary: Creates a new list
      // Syntax:
      //[ <Result> = ] NL_List_Create (<stList> is STListDescription)
      //
      // Parameters:
      //	stList (STListDescription): Description of the list
      // Return value:
      // 	8-byte integer: Identifier of the created list
      // Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_Create(LOCAL stList is STListDescription) : 8-byte int
      
      // Checks whether this name is not already used by another list
      HSeekFirst(NLList, name, stList.Name)
      IF HFound(NLList) THEN
      	ErrorThrow(1, "This name is already used by another list")
      	RESULT -1
      END
      	
      // Creates the list
      HReset(NLList)
      MemoryToFile(stList,NLList)
      
      // If the list is dynamic, serialize the calculation structure
      IF stList.AutoRecalc THEN
      	bufFormula is buffer
      	Serialize(stList.stAutoRecalc,bufFormula,psdBinary)
      	NLList.CalcFormula = bufFormula
      END
      
      HAdd(NLList)
      
      // If the list is static, add the subscriptions now
      // (if it is dynamic, they will be calculated upon request or during the next sending)
      IF stList.AutoRecalc=False THEN
      	FOR EACH nForumUserID of stList.arrUser
      		NL_User_AddSubscription(nForumUserID,NLList.NLListID,_GenerateConfirmationKey(),True)
      	END
      END
      
      RESULT NLList.NLListID
      
      CASE Error:
      	ErrorPropagate()
      	RESULT -1
     type : 458752
   -
     name : NL_List_TotalSubscribers
     procedure_id : 1412762125890605067
     type_code : 15
     code : |1-
      // Summary: Returns the number of subscribers to the specified list
      // Syntax:
      //[ <Result> = ] NL_List_TotalSubscribers (<nListID> is 8-byte int)
      //
      // Parameters:
      //	nListID (8-byte integer): ID of the list
      // Return value:
      // 	unsigned 4-byte integer: Number of confirmed subscriptions to the list
      //
      Procedure NL_List_TotalSubscribers(LOCAL nListID is 8-byte int) : unsigned int
        
      	// Run the calculation request
      	QRY_ListSubscribersCount.pListID = nListID
      	HExecuteQuery(QRY_ListSubscribersCount)
      	
      RESULT QRY_ListSubscribersCount.Total
     type : 458752
   -
     name : NL_List_Name
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125890670603
     type_code : 15
     code : |1-
      // Summary: Returns the name of a list
      // Syntax:
      //[ <Result> = ] NL_List_Name (<nListID> is 8-byte int)
      //
      // Parameters:
      //	nListID (8-byte integer): ID of the sought list
      // Return value:
      // 	UNICODE string: Name of the list
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_Name( LOCAL nListID is 8-byte int ) : string
      
      IF nListID=LIST_ALL THEN
      	RESULT "All the users (no filter)"
      END
      
      HReadSeekFirst(NLList,NLListID,nListID)
      IF HFound() THEN
      	RESULT NLList.Name
      END
      
      RESULT ""
      
      CASE Error:
      	ErrorPropagate()
      	RESULT ""	
     type : 458752
   -
     name : NL_List_Exist
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125890736139
     type_code : 15
     code : |1-
      // Summary: Checks the existence of a list
      // Syntax:
      //[ <Result> = ] NL_List_Exist (<sListName> is string)
      //
      // Parameters:
      //	sListName (UNICODE string): Name of the list
      // Return value:
      // 	boolean: True if the list exists
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_Exist( LOCAL sListName is string )
      
      RESULT HSeekFirst(NLList,name,sListName)
      
      CASE Error:
      	ErrorPropagate()
      	RESULT False
     type : 458752
   -
     name : NL_List_ReadUser
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125890801675
     type_code : 15
     code : |1-
      // Summary: Returns the content of a list
      // Syntax:
      //[ <Result> = ] NL_List_ReadUser (<nListID> is int)
      //
      // Parameters:
      //	nListID (integer): Identifier of the list
      // Return value:
      // 	table: // None
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_ReadUser( LOCAL nListID is int ) : array of STUserInfo
      
      arrInfo is array of STUserInfo
      
      // Checks whether the list exists in the cache (otherwise, add it)
      _CheckListInCache(nListID)
      
      // If the cache of the list is invalid, it must be recalculated
      IF gaaList[nListID].bValidCache=False THEN
      	_RecalculateListCache(nListID)
      END
      
      RESULT gaaList[nListID].arrUser
      
      CASE Error:
      	ErrorPropagate()
      	RESULT arrInfo
     type : 458752
   -
     name : _InitCache
     procedure_id : 1412762125890867211
     type_code : 15
     code : |1+
      // Summary: Initializes the cache for the lists of users
      // Syntax:
      // _InitCache ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	None
      //
      Procedure PRIVATE _InitCache()
      
      // The cache of lists is not used in AWP
      IF InAWPMode() THEN
      	RETURN
      END
      
      // Builds an empty and invalid cache entry
      stCacheElem is STHideList
      stCacheElem.bValidCache = False
      
      // Adds an entry for the "all users" list
      gaaList[LIST_ALL] <= stCacheElem
      
      // Adds an entry for all the lists
      FOR EACH NLList
      	stCacheElem.bDynamic = NLList.AutoRecalc
      	gaaList[NLList.NLListID]<=stCacheElem
      END
     type : 458752
   -
     name : _CheckListInCache
     procedure_id : 1412762125890932747
     type_code : 15
     code : |1+
      // Summary: Checks the existence of a list in the cache
      // Syntax:
      //_CheckListInCache (<nListID> is 8-byte int)
      //
      // Parameters:
      //	nListID (8-byte integer): Identifier of the list
      // Return value:
      // 	None
      //
      Procedure PRIVATE _CheckListInCache(LOCAL nListID is 8-byte int)
      
      IF gaaList[nListID]..Empty THEN
      	HReadSeekFirst(NLList,NLListID,nListID)
      	
      	// Builds an empty and invalid cache entry
      	stCacheElem is STHideList
      	stCacheElem.bValidCache = False
      	stCacheElem.bDynamic = NLList.AutoRecalc
      	gaaList[nListID]<=stCacheElem
      END
      
     type : 458752
   -
     name : _RecalculateListCache
     procedure_id : 1412762125890998283
     type_code : 15
     code : |1-
      // Summary: Updates the cache for list content
      // Syntaxe :
      //_RecalculateListCache (<nListID> est entier sur 8 octets)
      //
      // ParamÃ¨tres :
      //	nListID (entier sur 8 octets) : Identifier of the list
      
      // Return value:
      Procedure PRIVATE _RecalculateListCache(LOCAL nListID is 8-byte int )
      
      stUsr is STUserInfo
      
      // Clears the cache
      DeleteAll(gaaList[nListID].arrUser)
      
      // If it is a static list
      IF gaaList[nListID].bDynamic = False THEN
      	IF nListID>0 THEN
      		// Recalculates the list of list members
      		HExecuteQuery(QRY_ViewUser,hQueryDefault,nListID)
      		FOR EACH QRY_ViewUser 
      			FileToMemory(stUsr,QRY_ViewUser)
      			Add(gaaList[nListID].arrUser,stUsr)		
      		END
      	ELSE
      		FOR EACH NLUser 
      			FileToMemory(stUsr,NLUser)
      			Add(gaaList[nListID].arrUser,stUsr)		
      		END
      	END
      	
      	// The cache is valid
      	gaaList[nListID].bValidCache = True
      ELSE
      	// Dynamic list: the cache is never valid
      	stList is STListDescription = NL_List_ReadInfo(nListID)
      	
      	// Retrieves the base list
      	nBaseListID is 8-byte int = stList.stAutoRecalc.nBaseListID
      	gaaList[nListID].arrUser = NL_List_ReadUser(nBaseListID)
      	
      	// If there are additional criteria, they must be evaluated
      	IF stList.stAutoRecalc.arrFilter..Occurrence>0 THEN
      		FOR EACH stFilter of stList.stAutoRecalc.arrFilter
      			FOR nrow=gaaList[nListID].arrUser..Occurrence _TO_ 1 step -1 // Browse from the end in order to delete without affecting the loop
      			//FOR EACH stUsr,nLine of gaaList[nListID].arrUser fromend		
      				stUsr = gaaList[nListID].arrUser[nrow]
      				IF NL_User_CheckCriterion(stUsr,stFilter)=False THEN
      					Delete(gaaList[nListID].arrUser,nrow)
      				END
      			END
      		END
      	END
      	
      END
     type : 458752
   -
     name : NL_List_ReadInfo
     procedure_id : 1412762125891063819
     type_code : 15
     code : |1+
      // Summary: Returns the information about a list
      // Syntax:
      //[ <Result> = ] NL_List_ReadInfo (<nListID> is 8-byte int)
      //
      // Parameters:
      //	nListID (8-byte integer): Identifier of the list
      // Return value:
      //	STListDescription: Information about the list
      //
      Procedure NL_List_ReadInfo( LOCAL nListID is 8-byte int ) : STListDescription
      
      stList is STListDescription
      
      HReadSeekFirst(NLList,NLListID,nListID)
      FileToMemory(stList,NLList)
      
      IF stList.AutoRecalc THEN
      	bufFormula is buffer = NLList.CalcFormula
      	Deserialize(stList.stAutoRecalc,bufFormula,psdBinary)
      END
      
      
      RESULT stList
      
     type : 458752
   -
     name : NL_List_Delete
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125891129355
     type_code : 15
     code : |1-
      // Summary: Deletes a list
      // Syntax:
      //NL_List_Delete (<nListID> is 8-byte int)
      //
      // Parameters:
      //	nListID (8-byte integer): Identifier of the list
      // Return value:
      // 	None
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_Delete( LOCAL nListID is 8-byte int )
      
      HReadSeekFirst(NLList,NLListID,nListID,hLockWrite)
      
      // Unsubscribe all the users
      FOR EACH NLUser_NLList WHERE NLListID = nListID
      	HDelete(NLUser_NLList)
      END
      
      HDelete(NLList)
      
      CASE Error:
      	ErrorPropagate()
      	RETURN
     type : 458752
   -
     name : NL_List_Modify
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125891194891
     type_code : 15
     code : |1+
      // Summary: Modifies the properties of a list (caution: does not modify the users in case of a static list)
      // Syntax:
      //NL_List_Modify (<nListID> is 8-byte int, <stListDesc> is STListDescription)
      //
      // Parameters:
      //	nListID (8-byte integer): Identifier of the list
      //	stListDesc (STListDescription): Description of the list
      // Return value:
      // 	None
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_Modify( LOCAL nListID is 8-byte int, LOCAL stListDesc is STListDescription )
      
      // Positions on the list to modify
      HReadSeekFirst(NLList, NLListID, nListID,hLockWrite)
      IF HFound(NLList)=False THEN
      	ErrorThrow(1, "List not found")
      	RETURN
      END
      
      // Modifies the list
      MemoryToFile(stListDesc,NLList)
      
      HModify(NLList)
      
      CASE Error:
      ErrorPropagate()
      RETURN
      
      
     type : 458752
   -
     name : NL_List_List
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125891260427
     type_code : 15
     code : |1+
      // Summary: Returns the list of user lists
      // Syntax:
      //[ <Result> = ] NL_List_List ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	array: array of descriptions of user lists
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_List() : array of STListDescription
      
      arrList is array of STListDescription
      
      stListDesc is STListDescription
      FOR EACH NLList 
      	FileToMemory(stListDesc,NLList)
      	Add(arrList,stListDesc)
      END
      
      RESULT arrList
      
      CASE Error:
      ErrorPropagate()
      DeleteAll(arrList)
      RESULT arrList
      
     type : 458752
   -
     name : NL_List_Count
     procedure_id : 1412762125891325963
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] NL_List_Count ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	integer: // 	None
      //
      Procedure NL_List_Count() : int
      
      RESULT HNbRec(NLList)
     type : 458752
   -
     name : NL_List_AttributeList
     internal_properties : CAAAAAgAAAAM34km+p2LM0Jafr/gijXeTImHicFj7lFu9FrqtgEK91qgYssHbROYrXPWPQuCRnMMZ684xbe6oq1nscH9xKapdVr2FWTPC1MVk/+hO52w5+vn7IjZ6fSvrcAYUpDA0PhZ/QJLYO5TzRKT4VFwJvmoQ216mG+7u8SECyh/lCtC1H7uDeo=
     procedure_id : 1412762125891391499
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] NL_List_AttributeList (<nNListID> is 8-byte int)
      //
      // Parameters:
      //	nNListID (8-byte integer): <specify the role of nNListID>
      // Return value:
      // 	associative array: // 	None
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      Procedure NL_List_AttributeList( LOCAL nNListID is 8-byte int )
      
      aaAttr is ASSOCIATIVE ARRAY of strings
      
      aaAttr["NLID"] = nNListID
      
      RESULT aaAttr
      
      CASE Error:
      ErrorPropagate()
      RESULT aaAttr
      
     type : 458752
   -
     name : NL_List_InvalidCache
     procedure_id : 1412762125891457035
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //NL_List_InvalidCache (<nListID> is int)
      //
      // Parameters:
      //	nListID (8-byte integer): <specify the role of nListID>
      // Return value:
      // 	None
      //
      Procedure NL_List_InvalidCache( LOCAL nListID is int )
      
      IF gaaList[nListID]..Empty=False THEN
      	gaaList[nListID].bValidCache = False
      END
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x100699241aa06242
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
